++ kubectl delete namespace cattle-system
namespace "cattle-system" deleted
++ helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
"rancher-latest" already exists with the same configuration, skipping
++ helm repo update
Hang tight while we grab the latest from your chart repositories...
...Successfully got an update from the "openebs" chart repository
...Successfully got an update from the "jetstack" chart repository
...Successfully got an update from the "traefik" chart repository
...Successfully got an update from the "rancher-latest" chart repository
...Successfully got an update from the "prometheus-community" chart repository
...Successfully got an update from the "bitnami" chart repository
Update Complete. ⎈Happy Helming!⎈
++ kubectl create namespace cattle-system
namespace/cattle-system created
++ kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io unchanged
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io unchanged
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io unchanged
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io unchanged
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io unchanged
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io unchanged
++ helm repo add jetstack https://charts.jetstack.io
"jetstack" already exists with the same configuration, skipping
++ helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --version v1.11.0
Error: INSTALLATION FAILED: cannot re-use a name that is still in use
++ helm install rancher rancher-latest/rancher --namespace cattle-system --set hostname=rancher.westie.dev.to --set replicas=1 --set bootstrapPassword=bacanochevere --wait --debug
install.go:200: [debug] Original chart version: ""
install.go:217: [debug] CHART PATH: /home/mwoodpatrick/.cache/helm/repository/rancher-2.7.5.tgz

client.go:478: [debug] Starting delete for "bootstrap-secret" Secret
client.go:482: [debug] Ignoring delete failure for "bootstrap-secret" /v1, Kind=Secret: secrets "bootstrap-secret" not found
client.go:134: [debug] creating 1 resource(s)
client.go:385: [debug] checking 8 resources for changes
client.go:406: [debug] Created a new ServiceAccount called "rancher" in cattle-system

client.go:406: [debug] Created a new ConfigMap called "rancher-config" in cattle-system

client.go:678: [debug] Looks like there are no changes for ClusterRoleBinding "rancher"
client.go:406: [debug] Created a new Service called "rancher" in cattle-system

client.go:406: [debug] Created a new Deployment called "rancher" in cattle-system

client.go:406: [debug] Created a new Ingress called "rancher" in cattle-system

client.go:406: [debug] Created a new Issuer called "rancher" in cattle-system

client.go:687: [debug] Patch PriorityClass "rancher-critical" in namespace 
wait.go:48: [debug] beginning wait for 8 resources with timeout of 5m0s
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
ready.go:277: [debug] Deployment is not ready: cattle-system/rancher. 0 out of 1 expected pods are ready
NAME: rancher
LAST DEPLOYED: Fri Jul 14 07:33:48 2023
NAMESPACE: cattle-system
STATUS: deployed
REVISION: 1
TEST SUITE: None
USER-SUPPLIED VALUES:
bootstrapPassword: bacanochevere
hostname: rancher.westie.dev.to
replicas: 1

COMPUTED VALUES:
addLocal: "true"
additionalTrustedCAs: false
antiAffinity: preferred
auditLog:
  destination: sidecar
  hostPath: /var/log/rancher/audit/
  image:
    pullPolicy: IfNotPresent
    repository: rancher/mirrored-bci-micro
    tag: 15.4.14.3
  level: 0
  maxAge: 1
  maxBackup: 1
  maxSize: 100
bootstrapPassword: bacanochevere
certmanager:
  version: ""
customLogos:
  accessMode: ReadWriteOnce
  enabled: false
  size: 1Gi
  volumeKind: persistentVolumeClaim
  volumeSubpaths:
    emberUi: ember
    vueUi: vue
debug: false
global:
  cattle:
    psp:
      enabled: ""
hostname: rancher.westie.dev.to
imagePullSecrets: []
ingress:
  enabled: true
  extraAnnotations: {}
  includeDefaultExtraAnnotations: true
  ingressClassName: ""
  servicePort: 80
  tls:
    secretName: tls-rancher-ingress
    source: rancher
letsEncrypt:
  environment: production
  ingress:
    class: ""
livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 30
noProxy: 127.0.0.0/8,10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,.svc,.cluster.local
postDelete:
  enabled: true
  ignoreTimeoutError: false
  image:
    repository: rancher/shell
    tag: v0.1.20
  namespaceList:
  - cattle-fleet-system
  - cattle-system
  - rancher-operator-system
  timeout: 120
priorityClassName: rancher-critical
privateCA: false
rancherImage: rancher/rancher
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 30
replicas: 1
resources: {}
restrictedAdmin: false
service:
  annotations: {}
  type: ""
systemDefaultRegistry: ""
tls: ingress
topologyKey: kubernetes.io/hostname
useBundledSystemChart: false

HOOKS:
---
# Source: rancher/templates/post-delete-hook-service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
---
# Source: rancher/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "bootstrap-secret"
  namespace: cattle-system
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/resource-policy": keep
type: Opaque
data:
  bootstrapPassword: "YmFjYW5vY2hldmVyZQ=="
---
# Source: rancher/templates/post-delete-hook-config-map.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
data:
  post-delete-hook.sh: |-
    #!/bin/bash
    
    set -e
    
    namespaces="${NAMESPACES}"
    rancher_namespace="${RANCHER_NAMESPACE}"
    timeout="${TIMEOUT}"
    ignoreTimeoutError="${IGNORETIMEOUTERROR}"
    
    if [[ -z ${namespaces} ]]; then
      echo "No namespace is provided."
      exit 1
    fi
    
    if [[ -z ${rancher_namespace} ]]; then
      echo "No rancher namespace is provided."
      exit 1
    fi
    
    if [[ -z ${timeout} ]]; then
      echo "No timeout value is provided."
      exit 1
    fi
    
    if [[ -z ${ignoreTimeoutError} ]]; then
      echo "No ignoreTimeoutError value is provided."
      exit 1
    fi
    
    succeeded=()
    failed=()
    
    get_pod_count() {
      kubectl get pods --selector app="${1}" -n "${2}" -o json | jq '.items | length'
    }
    
    echo "Uninstalling Rancher resources in the following namespaces: ${namespaces}"
    
    for namespace in ${namespaces}; do
      for app in $(helm list -n "${namespace}" -q); do
        if [[ ${app} =~ .crd$ ]]; then
          echo "--- Skip the app [${app}] in the namespace [${namespace}]"
          continue
        fi
        echo "--- Deleting the app [${app}] in the namespace [${namespace}]"
        if [[ ! $(helm uninstall "${app}" -n "${namespace}") ]]; then
          failed=("${failed[@]}" "${app}")
          continue
        fi
    
        t=0
        while true; do
          if [[ $(get_pod_count "${app}" "${namespace}") -eq 0 ]]; then
            echo "successfully uninstalled [${app}] in the namespace [${namespace}]"
            succeeded=("${succeeded[@]}" "${app}")
            break
          fi
          if [[ ${t} -ge ${timeout} ]]; then
            echo "timeout uninstalling [${app}] in the namespace [${namespace}]"
            failed=("${failed[@]}" "${app}")
            break
          fi
          # by default, wait 120 seconds in total for an app to be uninstalled
          echo "waiting 5 seconds for pods of [${app}] to be terminated ..."
          sleep 5
          t=$((t + 5))
        done
      done
    
      # delete the helm operator pods
      for pod in $(kubectl get pods -n "${namespace}" -o name); do
        if [[ ${pod} =~ ^pod\/helm-operation-* ]]; then
          echo "--- Deleting the pod [${pod}] in the namespace [${namespace}]"
          kubectl delete "${pod}" -n "${namespace}"
        fi
      done
    done
    
    echo "Removing Rancher bootstrap secret in the following namespace: ${rancher_namespace}"
    kubectl --ignore-not-found=true delete secret bootstrap-secret -n "${rancher_namespace}"
    
    echo "------ Summary ------"
    if [[ ${#succeeded[@]} -ne 0 ]]; then
      echo "Succeeded to uninstall the following apps:" "${succeeded[@]}"
    fi
    
    if [[ ${#failed[@]} -ne 0 ]]; then
      echo "Failed to uninstall the following apps:" "${failed[@]}"
      if [[ "${ignoreTimeoutError}" == "false" ]]; then
        exit 2
      fi
    else
      echo "Cleanup finished successfully."
    fi
---
# Source: rancher/templates/post-delete-hook-cluster-role.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rancher-post-delete
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
rules:
  - apiGroups: [ "extensions","apps" ]
    resources: [ "deployments" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "batch" ]
    resources: [ "jobs" ]
    verbs: [ "get", "list", "watch", "delete", "create" ]
  - apiGroups: [ "rbac.authorization.k8s.io" ]
    resources: [ "clusterroles", "clusterrolebindings", "roles", "rolebindings" ]
    verbs: [ "get", "list", "delete", "create" ]
  - apiGroups: [ "" ]
    resources: [ "pods", "secrets", "services", "configmaps" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "" ]
    resources: [ "serviceaccounts" ]
    verbs: [ "get", "list", "delete", "create" ]
  - apiGroups: [ "networking.k8s.io" ]
    resources: [ "networkpolicies" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "admissionregistration.k8s.io" ]
    resources: [ "validatingwebhookconfigurations", "mutatingwebhookconfigurations" ]
    verbs: [ "get", "list", "delete" ]
  - apiGroups: [ "policy" ]
    resources: [ "podsecuritypolicies" ]
    verbs: ["delete", "create" ]
  - apiGroups: [ "networking.k8s.io" ]
    resources: [ "ingresses" ]
    verbs: [ "delete" ]
  - apiGroups: [ "cert-manager.io" ]
    resources: [ "issuers" ]
    verbs: [ "delete" ]
---
# Source: rancher/templates/post-delete-hook-cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rancher-post-delete
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded,hook-failed
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rancher-post-delete
subjects:
  - kind: ServiceAccount
    name: rancher-post-delete
    namespace: cattle-system
---
# Source: rancher/templates/post-delete-hook-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rancher-post-delete
  namespace: cattle-system
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-weight": "3"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 3
  template:
    metadata:
      name: rancher-post-delete
      labels: 
        app: rancher
        chart: rancher-2.7.5
        heritage: Helm
        release: rancher
    spec:
      serviceAccountName: rancher-post-delete
      restartPolicy: OnFailure
      containers:
        - name: rancher-post-delete
          image: "rancher/shell:v0.1.20"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          command:
            - /scripts/post-delete-hook.sh
          volumeMounts:
            - mountPath: /scripts
              name: config-volume
          env:
            - name: NAMESPACES
              value: "cattle-fleet-system cattle-system rancher-operator-system"
            - name: RANCHER_NAMESPACE
              value: cattle-system
            - name: TIMEOUT
              value: "120"
            - name: IGNORETIMEOUTERROR
              value: "false"
      volumes:
        - name: config-volume
          configMap:
            name: rancher-post-delete
            defaultMode: 0777
MANIFEST:
---
# Source: rancher/templates/serviceAccount.yaml
kind: ServiceAccount
apiVersion: v1
metadata:
  name: rancher
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
---
# Source: rancher/templates/configMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: rancher-config
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
data:
  priorityClassName:  rancher-critical
---
# Source: rancher/templates/clusterRoleBinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: rancher
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
subjects:
- kind: ServiceAccount
  name: rancher
  namespace: cattle-system
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: rancher/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rancher
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
spec:
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 444
    protocol: TCP
    name: https-internal
  selector:
    app: rancher
---
# Source: rancher/templates/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: rancher
  annotations:
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rancher
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: rancher
        release: rancher
    spec:
      priorityClassName: rancher-critical
      serviceAccountName: rancher
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rancher
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms: 
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: NotIn
                  values:
                  - windows
      tolerations: 
        - key: "cattle.io/os"
          value: "linux"
          effect: "NoSchedule"
          operator: "Equal"
      containers:
      - image: rancher/rancher:v2.7.5
        imagePullPolicy: IfNotPresent
        name: rancher
        ports:
        - containerPort: 80
          protocol: TCP
        args:
        # Rancher self-signed - don't clear ca certs
        - "--http-listen-port=80"
        - "--https-listen-port=443"
        - "--add-local=true"
        env:
        - name: CATTLE_NAMESPACE
          value: cattle-system
        - name: CATTLE_PEER_SERVICE
          value: rancher
        - name: CATTLE_BOOTSTRAP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "bootstrap-secret"
              key: "bootstrapPassword"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 30
        resources:
          {}
        volumeMounts:
      volumes:
---
# Source: rancher/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rancher
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
  annotations:
    cert-manager.io/issuer: rancher
    cert-manager.io/issuer-kind: Issuer
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
spec:
  rules:
  - host: rancher.westie.dev.to  # hostname to access rancher server
    http:
      paths:
      - backend:
          service:
            name: rancher
            port:
              number: 80
        pathType: ImplementationSpecific
        path: "/"
  tls:
  - hosts:
    - rancher.westie.dev.to
    secretName: tls-rancher-ingress
---
# Source: rancher/templates/issuer-rancher.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: rancher
  labels:
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
spec:
  ca:
    secretName: tls-rancher
---
# Source: rancher/templates/priorityClass.yaml
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: rancher-critical
  labels: 
    app: rancher
    chart: rancher-2.7.5
    heritage: Helm
    release: rancher
value: 1000000000
globalDefault: false
description: "Priority class used by pods critical to rancher's functionality."

NOTES:
Rancher Server has been installed.

NOTE: Rancher may take several minutes to fully initialize. Please standby while Certificates are being issued, Containers are started and the Ingress rule comes up.

Check out our docs at https://rancher.com/docs/

If you provided your own bootstrap password during installation, browse to https://rancher.westie.dev.to to get started.

If this is the first time you installed Rancher, get started by running this command and clicking the URL it generates:

```
echo https://rancher.westie.dev.to/dashboard/?setup=$(kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}')
```

To get just the bootstrap password on its own, run:

```
kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}{{ "\n" }}'
```


Happy Containering!
++ kubectl -n cattle-system get deploy rancher
NAME      READY   UP-TO-DATE   AVAILABLE   AGE
rancher   1/1     1            1           83s
